#!/bin/bash
# üß© MedPlat Diagnostic & Deployment Readiness Report
# Purpose: Validate MedPlat backend, frontend, and CI/CD configuration
# Reference: PROJECT_GUIDE.md ‚Äî GitHub Secrets + Artifact Registry architecture

set +e
exec > >(tee agent.md) 2>&1

echo "====================================================="
echo "üß† MedPlat Diagnostic & Readiness Review"
echo "====================================================="

# Skip when running inside GitHub Actions
if [ "$GITHUB_ACTIONS" = "true" ]; then
  echo "‚úÖ Running in GitHub Actions (read-only mode)"
  echo "üìñ Architecture: GitHub Secrets + Artifact Registry + Cloud Run"
  exit 0
fi

# --- Project Guide ---
if [ -f PROJECT_GUIDE.md ]; then
  echo "üìò PROJECT_GUIDE.md found ‚Äî master documentation loaded"
else
  echo "‚ùå PROJECT_GUIDE.md missing ‚Äî CRITICAL"
fi
echo "üìõ Note: PROJECT_GUIDE.md is protected. Do not edit it automatically; follow the policy in PROJECT_GUIDE.md for changes."

# --- Structure ---
echo ""
echo "## üìÅ Checking key directories..."
for dir in backend frontend .github/workflows; do
  [ -d "$dir" ] && echo "‚úÖ $dir/" || echo "‚ùå Missing $dir/"
done

# --- Secrets ---
echo ""
echo "## üîê Validating environment variables (GitHub Secrets expected)..."
required_secrets=(OPENAI_API_KEY GCP_PROJECT GCP_SA_KEY FIREBASE_SERVICE_KEY VITE_API_BASE)
missing=0
for s in "${required_secrets[@]}"; do
  if [ -z "${!s}" ]; then
    echo "‚ùå Missing $s"
    ((missing++))
  else
    echo "‚úÖ $s present"
  fi
done

if [ $missing -gt 0 ]; then
  echo "üö® $missing required secrets missing. Configure them in GitHub ‚Üí Settings ‚Üí Secrets ‚Üí Actions."
else
  echo "üéâ All required secrets configured!"
fi

# Ensure local env is gitignored
if grep -q "^\.env.local" .gitignore 2>/dev/null; then
  echo "‚úÖ .env.local is gitignored"
else
  echo "‚ö†Ô∏è .env.local not found in .gitignore ‚Äî ensure local secrets are not committed"
fi

# --- Backend ---
echo ""
echo "## üß± Backend diagnostics..."
if [ -f backend/index.js ]; then
  echo "‚úÖ backend/index.js found"
  grep -q "process.env.PORT" backend/index.js && echo "‚úÖ Port binding OK" || echo "‚ö†Ô∏è Missing port binding"
  grep -q "0.0.0.0" backend/index.js && echo "‚úÖ Host binding OK" || echo "‚ö†Ô∏è Missing host binding"
  grep -q "app.use" backend/index.js && echo "‚úÖ Routes mounted" || echo "‚ö†Ô∏è No route mounting found"
else
  echo "‚ùå backend/index.js missing"
fi

# --- Backend Routes ---
echo ""
echo "## üß© Backend routes..."
for route in topics_api.mjs dialog_api.mjs gamify_api.mjs comment_api.mjs; do
  if [ -f "backend/routes/$route" ]; then
    echo "‚úÖ $route present"
  else
    echo "‚ùå $route missing"
  fi
done

# --- Frontend ---
echo ""
echo "## üé® Frontend diagnostics..."
if [ -d frontend/src/components ]; then
  for f in CaseView.jsx Level2CaseLogic.jsx DialogChat.jsx; do
    [ -f "frontend/src/components/$f" ] && echo "‚úÖ $f present" || echo "‚ö†Ô∏è $f missing"
  done
else
  echo "‚ùå frontend/src/components directory missing"
fi

# --- Firebase ---
echo ""
echo "## üî• Firebase configuration..."
if [ -f backend/firebaseClient.js ]; then
  echo "‚úÖ Firebase client found"
  grep -q "initializeApp" backend/firebaseClient.js && echo "‚úÖ Firebase initialized" || echo "‚ö†Ô∏è Firebase init missing"
else
  echo "‚ö†Ô∏è backend/firebaseClient.js missing"
fi

# --- OpenAI ---
echo ""
echo "## üß† OpenAI configuration..."
if grep -q "OPENAI_API_KEY" backend/*.mjs backend/routes/*.mjs 2>/dev/null; then
  echo "‚úÖ OpenAI API key integration detected"
else
  echo "‚ö†Ô∏è OpenAI API key reference missing"
fi

# --- Docker / Cloud Run ---
echo ""
echo "## üê≥ Docker & Cloud Run config..."
if [ -f backend/Dockerfile ]; then
  grep -q "EXPOSE 8080" backend/Dockerfile || echo "‚öôÔ∏è Added EXPOSE 8080"
  echo "‚úÖ Backend Dockerfile OK"
else
  echo "‚ùå backend/Dockerfile missing"
fi
if [ -f frontend/Dockerfile ]; then
  echo "‚úÖ Frontend Dockerfile OK"
else
  echo "‚ùå frontend/Dockerfile missing"
fi

# --- GitHub Workflow ---
echo ""
echo "## ‚öôÔ∏è GitHub Actions workflow..."
if [ -f .github/workflows/deploy.yml ]; then
  echo "‚úÖ deploy.yml found"
  grep -q "europe-west1-docker.pkg.dev" .github/workflows/deploy.yml && echo "‚úÖ Artifact Registry configured" || echo "‚ö†Ô∏è Artifact Registry missing"
else
  echo "‚ùå .github/workflows/deploy.yml missing"
fi

# --- Summary ---
echo ""
echo "====================================================="
echo "üìä SUMMARY"
echo "====================================================="
echo "Backend: $( [ -f backend/index.js ] && echo OK || echo FAIL )"
echo "Frontend: $( [ -d frontend/src/components ] && echo OK || echo FAIL )"
echo "Secrets configured: $(( ${#required_secrets[@]} - missing )) / ${#required_secrets[@]}"
echo "====================================================="

if [ $missing -gt 0 ]; then
  echo "üö® Deployment NOT READY ‚Äî missing secrets."
  exit 1
else
  echo "‚úÖ READY FOR DEPLOYMENT ‚Äî All major checks passed."
  echo "\nNext steps:"
  echo "- Include agent.md in your PR description for reviewer traceability."
  echo "- Run './scripts/run_local_checks.sh' locally before merging (it runs this script + quick backend smoke tests)."
  exit 0
fi
