# This workflow will deploy a backend and frontend application to Google Cloud Run
# Learn more: https://docs.github.com/en/actions/workflows/deploying-applications-to-cloud-run

name: Deploy MedPlat (Local-First → Cloud Run)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-medplat-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.validate.outputs.ok }}
    steps:
      - uses: actions/checkout@v4
      - name: 🔐 Validate Secrets
        id: validate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          FIREBASE_SERVICE_KEY: ${{ secrets.FIREBASE_SERVICE_KEY }}
        run: |
          MISSING=0
          for name in OPENAI_API_KEY GCP_PROJECT GCP_SA_KEY FIREBASE_SERVICE_KEY; do
            val="$(printenv "$name")"
            if [ -z "$val" ]; then
              echo "❌ $name missing"
              MISSING=$((MISSING+1))
            else
              echo "✅ $name present (len=$(printf '%s' \"$val\" | wc -c))"
            fi
          done
          if [ $MISSING -eq 0 ]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  deploy:
    needs: validate-secrets
    if: needs.validate-secrets.outputs.ok == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
    steps:
      - uses: actions/checkout@v4

      - name: ☁️ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🧰 Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: 🔐 Ensure Firebase key secret in Secret Manager
        env:
          
          FIREBASE_SERVICE_KEY: ${{ secrets.FIREBASE_SERVICE_KEY }}
        run: |
          printf '%s' "$FIREBASE_SERVICE_KEY" > /tmp/firebase_key.json
          if ! gcloud secrets describe medplat-firebase-key --project=$GCP_PROJECT >/dev/null 2>&1; then
            gcloud secrets create medplat-firebase-key --data-file=/tmp/firebase_key.json --project=$GCP_PROJECT
          else
            gcloud secrets versions add medplat-firebase-key --data-file=/tmp/firebase_key.json --project=$GCP_PROJECT
          fi

      - name: 🔐 Ensure OpenAI key secret in Secret Manager
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          printf '%s' "$OPENAI_API_KEY" > /tmp/openai_key.txt
          if ! gcloud secrets describe medplat-openai-key --project=$GCP_PROJECT >/dev/null 2>&1; then
            gcloud secrets create medplat-openai-key --data-file=/tmp/openai_key.txt --project=$GCP_PROJECT
          else
            gcloud secrets versions add medplat-openai-key --data-file=/tmp/openai_key.txt --project=$GCP_PROJECT
          fi

      - name: 🚀 Deploy Backend
        run: |
          cd backend
          gcloud builds submit --tag europe-west1-docker.pkg.dev/$GCP_PROJECT/medplat/backend .
          gcloud run deploy medplat-backend \
            --image europe-west1-docker.pkg.dev/$GCP_PROJECT/medplat/backend \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 8080 \
            --set-secrets "OPENAI_API_KEY=medplat-openai-key:latest,FIREBASE_SERVICE_KEY=medplat-firebase-key:latest" \
            --project $GCP_PROJECT

      - name: 🎨 Build & Deploy Frontend
        run: |
          cd frontend
          BACKEND_URL=$(gcloud run services describe medplat-backend --region=europe-west1 --project=$GCP_PROJECT --format='value(status.url)')
          export VITE_API_BASE=$BACKEND_URL
          npm ci && npm run build
          gcloud builds submit --tag europe-west1-docker.pkg.dev/$GCP_PROJECT/medplat/frontend .
          gcloud run deploy medplat-frontend \
            --image europe-west1-docker.pkg.dev/$GCP_PROJECT/medplat/frontend \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 8080 \
            --set-env-vars "VITE_API_BASE=$BACKEND_URL" \
            --project $GCP_PROJECT

      - name: 📊 Summary
        run: |
          BACKEND_URL=$(gcloud run services describe medplat-backend --region=europe-west1 --format='value(status.url)')
          FRONTEND_URL=$(gcloud run services describe medplat-frontend --region=europe-west1 --format='value(status.url)')
          echo "✅ Backend: $BACKEND_URL"
          echo "✅ Frontend: $FRONTEND_URL"
          echo "🎯 MedPlat deployment successful"